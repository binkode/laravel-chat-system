(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2729],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(r),d=a,y=m["".concat(c,".").concat(d)]||m[d]||p[d]||s;return r?n.createElement(y,o(o({ref:t},u),{},{components:r})):n.createElement(y,o({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1494:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return p}});var n=r(2122),a=r(9756),s=(r(7294),r(3905)),o={id:"chatsystem",title:"ChatSytem APIs",sidebar_label:"ChatSytem",slug:"/apis/chatsytem"},i=void 0,c={unversionedId:"apis/chatsystem",id:"version-1.0.0-beta.0/apis/chatsystem",isDocsHomePage:!1,title:"ChatSytem APIs",description:"registerPolicies()",source:"@site/versioned_docs/version-1.0.0-beta.0/apis/chatSystem.md",sourceDirName:"apis",slug:"/apis/chatsytem",permalink:"/laravel-chat-system/docs/apis/chatsytem",editUrl:"https://github.com/myckhel/laravel-chat-system-docs/edit/master/versioned_docs/version-1.0.0-beta.0/apis/chatSystem.md",version:"1.0.0-beta.0",frontMatter:{id:"chatsystem",title:"ChatSytem APIs",sidebar_label:"ChatSytem",slug:"/apis/chatsytem"},sidebar:"version-1.0.0-beta.0/docs",previous:{title:"Message Created Event",permalink:"/laravel-chat-system/docs/apis/events/message/created"}},l=[{value:"registerPolicies()",id:"registerpolicies",children:[]},{value:"registerObservers()",id:"registerobservers",children:[]},{value:"registerBroadcastRoutes()",id:"registerbroadcastroutes",children:[]},{value:"async()",id:"async",children:[]}],u={toc:l};function p(e){var t=e.components,r=(0,a.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"registerpolicies"},"registerPolicies()"),(0,s.kt)("p",null,"method to register policies ChatSystem provides."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"use ChatSystem;\n\nChatSystem::registerPolicies();\n")),(0,s.kt)("h2",{id:"registerobservers"},"registerObservers()"),(0,s.kt)("p",null,"method to register observers ChatSystem provides."),(0,s.kt)("h4",{id:"params"},"@Params"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"strong"},"exclude"))," | array of models name to exclude from register | ",(0,s.kt)("inlineCode",{parentName:"li"},"array"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"use ChatSystem;\n\nChatSystem::registerObservers(exclude: ['conversation' => true]);\n")),(0,s.kt)("h2",{id:"registerbroadcastroutes"},"registerBroadcastRoutes()"),(0,s.kt)("p",null,"method to register broadcast routes ChatSystem provides."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"use ChatSystem;\n\nChatSystem::registerBroadcastRoutes();\n")),(0,s.kt)("h2",{id:"async"},"async()"),(0,s.kt)("p",null,"method to asynchronously call fuctions if only ",(0,s.kt)("inlineCode",{parentName:"p"},"laravel octane")," is configured to use swoole otherwise call functions synchronously."),(0,s.kt)("h4",{id:"params-1"},"@Params"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},(0,s.kt)("inlineCode",{parentName:"strong"},"calls"))," | array of models name to exclude from register | ",(0,s.kt)("inlineCode",{parentName:"li"},"callback arguments"))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"use ChatSystem;\n\nChatSystem::async(\n  fn () => print(1),\n  fn () => print(2),\n  fn () => print(3),\n);\n")))}p.isMDXComponent=!0}}]);