"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4124],{5680:(e,r,n)=>{n.d(r,{xA:()=>p,yg:()=>g});var t=n(6540);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,s=function(e,r){if(null==e)return{};var n,t,s={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=t.createContext({}),d=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},p=function(e){var r=d(e.components);return t.createElement(c.Provider,{value:r},e.children)},l="mdxType",v={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var n=e.components,s=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),l=d(n),u=s,g=l["".concat(c,".").concat(u)]||l[u]||v[u]||i;return n?t.createElement(g,o(o({ref:r},p),{},{components:n})):t.createElement(g,o({ref:r},p))}));function g(e,r){var n=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var i=n.length,o=new Array(i);o[0]=u;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=e,a[l]="string"==typeof e?e:s,o[1]=a;for(var d=2;d<i;d++)o[d]=n[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8848:(e,r,n)=>{n.r(r),n.d(r,{contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=n(8168),s=(n(6540),n(5680));const i={id:"providers",title:"ChatSystem Providers",sidebar_label:"Using Providers",slug:"/guides/providers"},o=void 0,a={unversionedId:"guides/providers",id:"version-v1.0-alpha.3/guides/providers",isDocsHomePage:!1,title:"ChatSystem Providers",description:"Registering Providers",source:"@site/versioned_docs/version-v1.0-alpha.3/guides/providers.md",sourceDirName:"guides",slug:"/guides/providers",permalink:"/laravel-chat-system/docs/v1.0-alpha.3/guides/providers",editUrl:"https://github.com/binkode/laravel-chat-system-docs/edit/master/versioned_docs/version-v1.0-alpha.3/guides/providers.md",version:"v1.0-alpha.3",frontMatter:{id:"providers",title:"ChatSystem Providers",sidebar_label:"Using Providers",slug:"/guides/providers"},sidebar:"version-v1.0-alpha.3/docs",previous:{title:"Configuring ChatSystem",permalink:"/laravel-chat-system/docs/v1.0-alpha.3/guides/configure"},next:{title:"Using Models",permalink:"/laravel-chat-system/docs/v1.0-alpha.3/guides/models"}},c=[{value:"Registering Providers",id:"registering-providers",children:[{value:"<code>Registering Observers</code>",id:"registering-observers",children:[]},{value:"<code>Registering Policies</code>",id:"registering-policies",children:[]},{value:"<code>Registering Broadcast Routes</code>",id:"registering-broadcast-routes",children:[]}]},{value:"Overriding Providers",id:"overriding-providers",children:[{value:"<code>Overriding ChatSystem Observer Methods</code>",id:"overriding-chatsystem-observer-methods",children:[]},{value:"<code>Overriding ChatSystem Policy Methods</code>",id:"overriding-chatsystem-policy-methods",children:[]}]}],d={toc:c},p="wrapper";function l(e){let{components:r,...n}=e;return(0,s.yg)(p,(0,t.A)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,s.yg)("h2",{id:"registering-providers"},"Registering Providers"),(0,s.yg)("h3",{id:"registering-observers"},(0,s.yg)("inlineCode",{parentName:"h3"},"Registering Observers")),(0,s.yg)("p",null,"ChatSystem provides observer to listen to model events.\nMake sure you register the observers in your Application Service Provider."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-php"},"// App\\Providers\\AppServiceProvider.php\n\nuse ChatSystem;\n...\n  public function boot()\n  {\n    ...\n\n    ChatSystem::registerObservers();\n  }\n")),(0,s.yg)("h3",{id:"registering-policies"},(0,s.yg)("inlineCode",{parentName:"h3"},"Registering Policies")),(0,s.yg)("p",null,"ChatSystem provides policies to authenticate its api endpoints.\nMake sure you register the policies in your application Auth Service Provider if you are using Built in ChatSystem api endpoints."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-php"},"// App\\Providers\\AuthServiceProvider.php\n\nuse ChatSystem;\n...\n  public function boot()\n  {\n    ...\n\n    ChatSystem::registerPolicies();\n  }\n")),(0,s.yg)("h3",{id:"registering-broadcast-routes"},(0,s.yg)("inlineCode",{parentName:"h3"},"Registering Broadcast Routes")),(0,s.yg)("p",null,"ChatSystem provides broadcast routes to broadcast events on some specific channels.\nMake sure you register the broadcast routes in your Broadcast Service Provider if you will be listening to the broadcast channels provided by ChatSystem."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-php"},"// App\\Providers\\BroadcastServiceProvider.php\n\nuse ChatSystem;\n...\n  public function boot()\n  {\n    ...\n\n    ChatSystem::registerBroadcastRoutes();\n  }\n")),(0,s.yg)("h2",{id:"overriding-providers"},"Overriding Providers"),(0,s.yg)("h3",{id:"overriding-chatsystem-observer-methods"},(0,s.yg)("inlineCode",{parentName:"h3"},"Overriding ChatSystem Observer Methods")),(0,s.yg)("p",null,"You may want to overried some specific Observers methods.\nFor example you may want to create system messages everytime a conversation is created."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-php"},"...\nnamespace App\\Observers;\nuse Myckhel\\ChatSystem\\Observers\\ConversationObserver as BaseConversationObserver;\nuse Myckhel\\ChatSystem\\Contracts\\IConversation;\n\nclass ConversationObserver extends BaseConversationObserver\n{\n  /**\n   * Handle the conversation \"created\" event.\n   *\n   * @param  \\Myckhel\\ChatSystem\\Contracts\\IConversation  $conversation\n   * @return void\n   */\n  public function created(IConversation $conversation)\n  {\n    $messages = $conversation->messages()->createMany([\n      [\n        'user_id' => $conversation->user_id,\n        'message' => trans('msg.chat.system.safety'),\n        'type' => 'system'\n      ],\n      [\n        'user_id' => $conversation->user_id,\n        'message' => trans('msg.chat.system.msg_desc'),\n        'type' => 'system'\n      ],\n    ]);\n  }\n}\n")),(0,s.yg)("p",null,"Then you have to unregister the extended observer registered with ",(0,s.yg)("inlineCode",{parentName:"p"},"ChatSystem::registerObservers()")," by passing ",(0,s.yg)("inlineCode",{parentName:"p"},"exclude")," argument."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-php"},"// App\\Providers\\AppServiceProvider.php\n\nuse ChatSystem;\nuse App\\Models\\Conversation;\nuse App\\Observers\\ConversationObserver;\n...\n  public function boot()\n  {\n    ...\n\n    ChatSystem::registerObservers(exclude: ['conversation' => true]);\n\n    Conversation::observe(ConversationObserver::class);\n  }\n")),(0,s.yg)("h3",{id:"overriding-chatsystem-policy-methods"},(0,s.yg)("inlineCode",{parentName:"h3"},"Overriding ChatSystem Policy Methods")),(0,s.yg)("p",null,"You may want to overried some specific Policy methods such as ",(0,s.yg)("inlineCode",{parentName:"p"},"view"),", ",(0,s.yg)("inlineCode",{parentName:"p"},"delete")," method."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-php"},"...\nnamespace App\\Policies;\n\nuse App\\Models\\Conversation;\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\HandlesAuthorization;\nuse Myckhel\\ChatSystem\\Policies\\ConversationPolicy as CSCP;\nuse Myckhel\\ChatSystem\\Contracts\\IConversation;\nuse Myckhel\\ChatSystem\\Contracts\\ChatEventMaker;\n\nclass ConversationPolicy extends CSCP\n{\n    use HandlesAuthorization;\n\n    /**\n     * Determine whether the user can view the model.\n     *\n     * @param  \\App\\User  $user\n     * @param  \\App\\Models\\Conversation  $conversation\n     * @return mixed\n     */\n    public function view(ChatEventMaker $user, IConversation $conversation)\n    {\n      return in_array($conversation->type, ['issue', 'group'])\n        || $user->relatedToConversation($conversation);\n    }\n\n    /**\n     * Determine whether the user can delete the model.\n     *\n     * @param  \\App\\User  $user\n     * @param  \\App\\Models\\Conversation  $conversation\n     * @return mixed\n     */\n    public function delete(ChatEventMaker $user, IConversation $conversation)\n    {\n      return $user->relatedToConversation($conversation);\n    }\n}\n")))}l.isMDXComponent=!0}}]);