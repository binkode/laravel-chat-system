"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2761],{5680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>y});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,y=d["".concat(c,".").concat(h)]||d[h]||m[h]||s;return n?r.createElement(y,a(a({ref:t},u),{},{components:n})):r.createElement(y,a({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7251:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(8168),o=(n(6540),n(5680));const s={id:"configure",title:"ChatSystem configuration",sidebar_label:"Configuring ChatSystem",slug:"/guides/configure"},a=void 0,i={unversionedId:"guides/configure",id:"version-v1.0.0-beta.0/guides/configure",isDocsHomePage:!1,title:"ChatSystem configuration",description:"Publish config file",source:"@site/versioned_docs/version-v1.0.0-beta.0/guides/configure.md",sourceDirName:"guides",slug:"/guides/configure",permalink:"/laravel-chat-system/docs/v1.0.0-beta.0/guides/configure",editUrl:"https://github.com/binkode/laravel-chat-system-docs/edit/master/versioned_docs/version-v1.0.0-beta.0/guides/configure.md",version:"v1.0.0-beta.0",frontMatter:{id:"configure",title:"ChatSystem configuration",sidebar_label:"Configuring ChatSystem",slug:"/guides/configure"},sidebar:"version-v1.0.0-beta.0/docs",previous:{title:"Requirements",permalink:"/laravel-chat-system/docs/v1.0.0-beta.0/requirements"},next:{title:"Using Providers",permalink:"/laravel-chat-system/docs/v1.0.0-beta.0/guides/providers"}},c=[{value:"Publish config file",id:"publish-config-file",children:[]}],l={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.yg)(u,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"publish-config-file"},"Publish config file"),(0,o.yg)("p",null,"publish the config file if not published"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"php artisan vendor:publish --provider=\"Myckhel\\ChatSystem\\ChatSystemServiceProvider\" --tag='config'\n")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-php"},'\nreturn [\n  /*\n  * ChatSystem Models\n  */\n  "models" => [\n    /*\n    * The model you want to use as a User model needs to implement the\n    * `Myckhel\\ChatSystem\\Contracts\\IChatEventMaker` contract.\n    */\n    "user"                => "App\\\\Models\\\\User",\n    \n    /*\n    * The model you want to use as a Conversation model needs to implement the\n    * `Myckhel\\ChatSystem\\Contracts\\IConversation` contract.\n    */\n    "conversation"        => Myckhel\\ChatSystem\\Models\\Conversation::class,\n    \n    /*\n    * The model you want to use as a ConversationUser model needs to implement the\n    * `Myckhel\\ChatSystem\\Contracts\\IConversationUser` contract or extends the\n    * `Myckhel\\ChatSystem\\Models\\ConversationUser`\n    */\n    "conversation_user"   => Myckhel\\ChatSystem\\Models\\ConversationUser::class,\n    \n    /*\n    * The model you want to use as a Message model needs to implement the\n    * `Myckhel\\ChatSystem\\Contracts\\IMessage` contract or extends the\n    * `Myckhel\\ChatSystem\\Models\\Message`\n    */\n    "message"             => Myckhel\\ChatSystem\\Models\\Message::class,\n    \n    /*\n    * The model you want to use as a ChatEvent model needs to implement the\n    * `Myckhel\\ChatSystem\\Contracts\\IChatEvent` contract or extends the\n    * `Myckhel\\ChatSystem\\Models\\ChatEvent`\n    */\n    "chat_event"          => Myckhel\\ChatSystem\\Models\\ChatEvent::class,\n  ],\n\n  /*\n  * ChatSystem Routes\n  * Change if you want to add middleware or prefix to\n  * chatSystem routes.\n  */\n  "route" => [\n    "middlewares" => [\'api\'],\n    "prefix"      => \'api\'\n  ],\n\n  /*\n  * Events Queues\n  * Change if you want to rename the broadcast queue\n  */\n  "queues" => [\n    "events" => [\n      "message" => [\n        "created" => "chat",\n        "events"  => "chat-event",\n      ],\n    ],\n    "jobs" => [\n      "chat" => [\n        "make-event" => "chat-event",\n      ],\n    ],\n  ],\n\n  /*\n  * Model Observers\n  * The class you want to use for model Observer\n  */\n  "observers"         => [\n    "models"          => [\n      "chat_event"    => Myckhel\\ChatSystem\\Observers\\ChatEventObserver::class,\n      "conversation"  => Myckhel\\ChatSystem\\Observers\\ConversationObserver::class,\n    ]\n  ]\n];\n\n\n')))}d.isMDXComponent=!0}}]);