"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1150],{5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>g});var a=r(6540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},y="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),y=c(r),u=n,g=y["".concat(l,".").concat(u)]||y[u]||m[u]||s;return r?a.createElement(g,o(o({ref:t},p),{},{components:r})):a.createElement(g,o({ref:t},p))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[y]="string"==typeof e?e:n,o[1]=i;for(var c=2;c<s;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7496:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>y,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=r(8168),n=(r(6540),r(5680));const s={id:"chatsystem",title:"ChatSytem APIs",sidebar_label:"ChatSytem",slug:"/apis/chatsytem"},o=void 0,i={unversionedId:"apis/chatsystem",id:"version-v1.0.0-beta.4/apis/chatsystem",isDocsHomePage:!1,title:"ChatSytem APIs",description:"registerPolicies()",source:"@site/versioned_docs/version-v1.0.0-beta.4/apis/chatSystem.md",sourceDirName:"apis",slug:"/apis/chatsytem",permalink:"/laravel-chat-system/docs/apis/chatsytem",editUrl:"https://github.com/binkode/laravel-chat-system-docs/edit/master/versioned_docs/version-v1.0.0-beta.4/apis/chatSystem.md",version:"v1.0.0-beta.4",frontMatter:{id:"chatsystem",title:"ChatSytem APIs",sidebar_label:"ChatSytem",slug:"/apis/chatsytem"},sidebar:"version-v1.0.0-beta.4/docs",previous:{title:"Message Created Event",permalink:"/laravel-chat-system/docs/apis/events/message/created"}},l=[{value:"registerPolicies()",id:"registerpolicies",children:[]},{value:"registerObservers()",id:"registerobservers",children:[]},{value:"registerBroadcastRoutes()",id:"registerbroadcastroutes",children:[]},{value:"async()",id:"async",children:[]}],c={toc:l},p="wrapper";function y(e){let{components:t,...r}=e;return(0,n.yg)(p,(0,a.A)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"registerpolicies"},"registerPolicies()"),(0,n.yg)("p",null,"method to register policies ChatSystem provides."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-php"},"use ChatSystem;\n\nChatSystem::registerPolicies();\n")),(0,n.yg)("h2",{id:"registerobservers"},"registerObservers()"),(0,n.yg)("p",null,"method to register observers ChatSystem provides."),(0,n.yg)("h4",{id:"params"},"@Params"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"strong"},"exclude"))," | array of models name to exclude from register | ",(0,n.yg)("inlineCode",{parentName:"li"},"array"))),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-php"},"use ChatSystem;\n\nChatSystem::registerObservers(exclude: ['conversation' => true]);\n")),(0,n.yg)("h2",{id:"registerbroadcastroutes"},"registerBroadcastRoutes()"),(0,n.yg)("p",null,"method to register broadcast routes ChatSystem provides."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-php"},"use ChatSystem;\n\nChatSystem::registerBroadcastRoutes();\n")),(0,n.yg)("h2",{id:"async"},"async()"),(0,n.yg)("p",null,"method to asynchronously call fuctions if only ",(0,n.yg)("inlineCode",{parentName:"p"},"laravel octane")," is configured to use swoole otherwise call functions synchronously."),(0,n.yg)("h4",{id:"params-1"},"@Params"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"strong"},"calls"))," | array of models name to exclude from register | ",(0,n.yg)("inlineCode",{parentName:"li"},"callback arguments"))),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-php"},"use ChatSystem;\n\nChatSystem::async(\n  fn () => print(1),\n  fn () => print(2),\n  fn () => print(3),\n);\n")))}y.isMDXComponent=!0}}]);