(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1787],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return m},kt:function(){return k}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=p(a),k=r,c=d["".concat(s,".").concat(k)]||d[k]||u[k]||l;return a?n.createElement(c,i(i({ref:t},m),{},{components:a})):n.createElement(c,i({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7402:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var n=a(2122),r=a(9756),l=(a(7294),a(3905)),i={id:"conversation",title:"Conversation APIs",sidebar_label:"Conversation",slug:"/apis/models/conversation"},o=void 0,s={unversionedId:"apis/models/conversation",id:"version-1.0.0-beta.0/apis/models/conversation",isDocsHomePage:!1,title:"Conversation APIs",description:"Namespace",source:"@site/versioned_docs/version-1.0.0-beta.0/apis/models/conversation.md",sourceDirName:"apis/models",slug:"/apis/models/conversation",permalink:"/laravel-chat-system/docs/apis/models/conversation",editUrl:"https://github.com/myckhel/laravel-chat-system-docs/edit/master/versioned_docs/version-1.0.0-beta.0/apis/models/conversation.md",version:"1.0.0-beta.0",frontMatter:{id:"conversation",title:"Conversation APIs",sidebar_label:"Conversation",slug:"/apis/models/conversation"},sidebar:"version-1.0.0-beta.0/docs",previous:{title:"Message",permalink:"/laravel-chat-system/docs/apis/models/message"},next:{title:"ChatEvent",permalink:"/laravel-chat-system/docs/apis/models/chatEvent"}},p=[{value:"<strong>Namespace</strong>",id:"namespace",children:[]},{value:"<strong>Columns</strong>",id:"columns",children:[]},{value:"Query Builders",id:"query-builders",children:[{value:"<code>whereHasLastMessage()</code>",id:"wherehaslastmessage",children:[]},{value:"<code>whereNotParticipant()</code>",id:"wherenotparticipant",children:[]}]},{value:"Util Methods",id:"util-methods",children:[{value:"<code>createMessateWithToken()</code>",id:"createmessatewithtoken",children:[]},{value:"<code>addParticipant()</code>",id:"addparticipant",children:[]},{value:"<code>removeParticipant()</code>",id:"removeparticipant",children:[]},{value:"<code>createActivityMessage()</code>",id:"createactivitymessage",children:[]},{value:"<code>makeDelete()</code>",id:"makedelete",children:[]},{value:"<code>makeRead()</code>",id:"makeread",children:[]},{value:"<code>makeDeliver()</code>",id:"makedeliver",children:[]},{value:"<code>makeChatEvent()</code>",id:"makechatevent",children:[]}]},{value:"Relationships",id:"relationships",children:[{value:"<code>last_message()</code>",id:"last_message",children:[]},{value:"<code>participants()</code>",id:"participants",children:[]},{value:"<code>participant()</code>",id:"participant",children:[]},{value:"<code>otherParticipant()</code>",id:"otherparticipant",children:[]},{value:"<code>otherParticipants()</code>",id:"otherparticipants",children:[]},{value:"<code>messages()</code>",id:"messages",children:[]},{value:"<code>unread()</code>",id:"unread",children:[]},{value:"<code>undelivered()</code>",id:"undelivered",children:[]},{value:"<code>doesntHaveChatEvents()</code>",id:"doesnthavechatevents",children:[]},{value:"<code>author()</code>",id:"author",children:[]}]},{value:"Collection methods",id:"collection-methods",children:[{value:"<code>makeDeliver()</code>",id:"makedeliver-1",children:[]}]}],m={toc:p};function u(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"namespace"},(0,l.kt)("strong",{parentName:"h2"},"Namespace")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Myckhel\\ChatSystem\\Models\\Conversation")),(0,l.kt)("h2",{id:"columns"},(0,l.kt)("strong",{parentName:"h2"},"Columns")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"user_id")),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"user id")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},"string","|","null"),(0,l.kt)("td",{parentName:"tr",align:null},"conversation name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"type")),(0,l.kt)("td",{parentName:"tr",align:null},"enum(private, group, issue)"),(0,l.kt)("td",{parentName:"tr",align:null},"type of the conversation")))),(0,l.kt)("h2",{id:"query-builders"},"Query Builders"),(0,l.kt)("p",null,"Methods that build queries."),(0,l.kt)("h3",{id:"wherehaslastmessage"},(0,l.kt)("inlineCode",{parentName:"h3"},"whereHasLastMessage()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"adds query where conversation has latest message where message is not a system message.")),(0,l.kt)("h4",{id:"params"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"?user"))," | pass user arg for query to exclude messages deleted by the user. | ",(0,l.kt)("inlineCode",{parentName:"li"},"int|IChatEventMaker|null"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"Conversation::whereHasLastMessage($user)->get();\n")),(0,l.kt)("h3",{id:"wherenotparticipant"},(0,l.kt)("inlineCode",{parentName:"h3"},"whereNotParticipant()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Adds query where conversation doesn't have the given user as a participant.")),(0,l.kt)("h4",{id:"params-1"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"?user"))," | pass user arg to query conversation where doesn't have participant equals the user. | ",(0,l.kt)("inlineCode",{parentName:"li"},"int|IChatEventMaker"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"Conversation::whereNotParticipant($user)->first();\n")),(0,l.kt)("h2",{id:"util-methods"},"Util Methods"),(0,l.kt)("h3",{id:"createmessatewithtoken"},(0,l.kt)("inlineCode",{parentName:"h3"},"createMessateWithToken()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Creates a message with token.")),(0,l.kt)("h4",{id:"return"},"@Return"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"type ",(0,l.kt)("inlineCode",{parentName:"li"},"Myckhel\\ChatSystem\\Models\\Message"))),(0,l.kt)("h4",{id:"params-2"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"token"))," | unique token | ",(0,l.kt)("inlineCode",{parentName:"li"},"string|int")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"message"))," | message props | ",(0,l.kt)("inlineCode",{parentName:"li"},"array"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$message = $conversation->createMessageWithToken(\n  $token,\n  ['message' => 'hello', 'user_id' => $user->id]\n);\n")),(0,l.kt)("h3",{id:"addparticipant"},(0,l.kt)("inlineCode",{parentName:"h3"},"addParticipant()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Adds a user as participant of the conversaton.")),(0,l.kt)("h4",{id:"return-1"},"@Return"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"type ",(0,l.kt)("inlineCode",{parentName:"li"},"Myckhel\\ChatSystem\\Models\\ConversationUser"))),(0,l.kt)("h4",{id:"params-3"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | participant to add | ",(0,l.kt)("inlineCode",{parentName:"li"},"Myckhel\\ChatSystem\\Contracts\\IChatEventMaker")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"message"))," | message text for the activity message that may be created | ",(0,l.kt)("inlineCode",{parentName:"li"},"string"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$participant = $conversation->addParticipant($user, message: 'Someone joined the conversation');\n")),(0,l.kt)("h3",{id:"removeparticipant"},(0,l.kt)("inlineCode",{parentName:"h3"},"removeParticipant()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Removes a user as participant of the conversaton.")),(0,l.kt)("h4",{id:"return-2"},"@Return"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"type ",(0,l.kt)("inlineCode",{parentName:"li"},"null|bool"))),(0,l.kt)("h4",{id:"params-4"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | participant to remove | ",(0,l.kt)("inlineCode",{parentName:"li"},"Myckhel\\ChatSystem\\Contracts\\IChatEventMaker")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"message"))," | message text for the activity message that may be created | ",(0,l.kt)("inlineCode",{parentName:"li"},"string"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$participant = $conversation->addParticipant($user, message: 'Someone joined the conversation');\n")),(0,l.kt)("h3",{id:"createactivitymessage"},(0,l.kt)("inlineCode",{parentName:"h3"},"createActivityMessage()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Creates an activity message.")),(0,l.kt)("h4",{id:"return-3"},"@Return"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"type ",(0,l.kt)("inlineCode",{parentName:"li"},"Myckhel\\ChatSystem\\Models\\Message"))),(0,l.kt)("h4",{id:"params-5"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"message"))," | message props | ",(0,l.kt)("inlineCode",{parentName:"li"},"array"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$message = $conversation->createActivityMessage(message: [\n  'user_id' => $user->id,\n  'message' => 'Hello'\n]);\n")),(0,l.kt)("h3",{id:"makedelete"},(0,l.kt)("inlineCode",{parentName:"h3"},"makeDelete()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"create a chatEvent of type ",(0,l.kt)("inlineCode",{parentName:"p"},"delete")," for the ",(0,l.kt)("inlineCode",{parentName:"p"},"conversation")," through the given ",(0,l.kt)("inlineCode",{parentName:"p"},"user"))),(0,l.kt)("h4",{id:"return-4"},"@Return"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"type ",(0,l.kt)("a",{parentName:"li",href:"chatEvent"},"ChatEvent Model"))),(0,l.kt)("h4",{id:"emits"},"@Emits"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"type ",(0,l.kt)("a",{parentName:"li",href:"../events/message/events"},"Message Events"))),(0,l.kt)("h4",{id:"params-6"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | user to assign the event to | ",(0,l.kt)("inlineCode",{parentName:"li"},"user")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"?row"))," | specify whether to always create a new chat_events db row ortherwise update or create chat_events db row. | ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," default to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"?all"))," | specify whether to apply event for all. this should set the chat event column to ",(0,l.kt)("inlineCode",{parentName:"li"},"true|false")," | ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->makeDelete(user: $user, row: false, all: false);\n")),(0,l.kt)("h3",{id:"makeread"},(0,l.kt)("inlineCode",{parentName:"h3"},"makeRead()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"create a chatEvent of type ",(0,l.kt)("inlineCode",{parentName:"p"},"read")," for the ",(0,l.kt)("inlineCode",{parentName:"p"},"conversation")," through the given ",(0,l.kt)("inlineCode",{parentName:"p"},"user"))),(0,l.kt)("h4",{id:"return-5"},"@Return"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"type ",(0,l.kt)("a",{parentName:"li",href:"chatEvent"},"ChatEvent Model"))),(0,l.kt)("h4",{id:"emits-1"},"@Emits"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"type ",(0,l.kt)("a",{parentName:"li",href:"../events/message/events"},"Message Events"))),(0,l.kt)("h4",{id:"params-7"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | user to assign the event to | ",(0,l.kt)("inlineCode",{parentName:"li"},"user")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"?row"))," | specify whether to always create a new chat_events db row ortherwise update or create chat_events db row. | ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," default to ",(0,l.kt)("inlineCode",{parentName:"li"},"true")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"?all"))," | specify whether to apply event for all. this should set the chat event column to ",(0,l.kt)("inlineCode",{parentName:"li"},"true|false")," | ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->makeRead(user: $user, row: true, all: false);\n")),(0,l.kt)("h3",{id:"makedeliver"},(0,l.kt)("inlineCode",{parentName:"h3"},"makeDeliver()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"create a chatEvent of type ",(0,l.kt)("inlineCode",{parentName:"p"},"deliver")," for the ",(0,l.kt)("inlineCode",{parentName:"p"},"conversation")," through the given ",(0,l.kt)("inlineCode",{parentName:"p"},"user"))),(0,l.kt)("h4",{id:"return-6"},"@Return"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"type ",(0,l.kt)("a",{parentName:"li",href:"chatEvent"},"ChatEvent Model"))),(0,l.kt)("h4",{id:"emits-2"},"@Emits"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"type ",(0,l.kt)("a",{parentName:"li",href:"../events/message/events"},"Message Events"))),(0,l.kt)("h4",{id:"params-8"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | user to assign the event to | ",(0,l.kt)("inlineCode",{parentName:"li"},"user")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"?row"))," | specify whether to always create a new chat_events db row ortherwise update or create chat_events db row. | ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," default to ",(0,l.kt)("inlineCode",{parentName:"li"},"true")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"?all"))," | specify whether to apply event for all. this should set the chat event column to ",(0,l.kt)("inlineCode",{parentName:"li"},"true|false")," | ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->makeDeliver(user: $user, row: true, all: false);\n")),(0,l.kt)("h3",{id:"makechatevent"},(0,l.kt)("inlineCode",{parentName:"h3"},"makeChatEvent()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Method to make events for conversation.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | user to assign the event to | ",(0,l.kt)("inlineCode",{parentName:"li"},"user")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"?row"))," | specify whether to always create a new chat_events db row ortherwise update or create chat_events db row. | ",(0,l.kt)("inlineCode",{parentName:"li"},"bool")," default to ",(0,l.kt)("inlineCode",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"?all"))," | specify whether to apply event for all. this should set the chat event column to ",(0,l.kt)("inlineCode",{parentName:"li"},"true|false")," | ",(0,l.kt)("inlineCode",{parentName:"li"},"bool"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->makeChatEvent(user: $user, type: 'delete', row: false, all: false);\n")),(0,l.kt)("h2",{id:"relationships"},"Relationships"),(0,l.kt)("p",null,"These are methods that defines the relationship between models."),(0,l.kt)("h3",{id:"last_message"},(0,l.kt)("inlineCode",{parentName:"h3"},"last_message()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Conversation has one latest message.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->last_message()->first();\n")),(0,l.kt)("h3",{id:"participants"},(0,l.kt)("inlineCode",{parentName:"h3"},"participants()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Conversation has many conversation user.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->participants()->get();\n")),(0,l.kt)("h3",{id:"participant"},(0,l.kt)("inlineCode",{parentName:"h3"},"participant()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Conversation has one latest conversation user.")),(0,l.kt)("h4",{id:"params-9"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | where participant = user | ",(0,l.kt)("inlineCode",{parentName:"li"},"User"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->participant($user)->first();\n")),(0,l.kt)("h3",{id:"otherparticipant"},(0,l.kt)("inlineCode",{parentName:"h3"},"otherParticipant()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Conversation has one other latest conversation user.")),(0,l.kt)("h4",{id:"params-10"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | where participant != user | ",(0,l.kt)("inlineCode",{parentName:"li"},"User"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->otherParticipant($user)->first();\n")),(0,l.kt)("h3",{id:"otherparticipants"},(0,l.kt)("inlineCode",{parentName:"h3"},"otherParticipants()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Conversation has many other latest conversation user.")),(0,l.kt)("h4",{id:"params-11"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | where participants doesn't include user | ",(0,l.kt)("inlineCode",{parentName:"li"},"User"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->otherParticipants($user)->get();\n")),(0,l.kt)("h3",{id:"messages"},(0,l.kt)("inlineCode",{parentName:"h3"},"messages()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Conversation has many messages.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->messages()->get();\n")),(0,l.kt)("h3",{id:"unread"},(0,l.kt)("inlineCode",{parentName:"h3"},"unread()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Conversation has many unread messages where given user is not the message sender.")),(0,l.kt)("h4",{id:"params-12"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | user to query unread messages for. | ",(0,l.kt)("inlineCode",{parentName:"li"},"int|IChatEventMaker"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->unread($user)->get();\n")),(0,l.kt)("h3",{id:"undelivered"},(0,l.kt)("inlineCode",{parentName:"h3"},"undelivered()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Conversation has many undelivered messages where given user is not the message sender.")),(0,l.kt)("h4",{id:"params-13"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | user to query unread messages for. | ",(0,l.kt)("inlineCode",{parentName:"li"},"int|IChatEventMaker"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->undelivered($user)->get();\n")),(0,l.kt)("h3",{id:"doesnthavechatevents"},(0,l.kt)("inlineCode",{parentName:"h3"},"doesntHaveChatEvents()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Conversation has many messages where given user is not the event emitter.")),(0,l.kt)("h4",{id:"params-14"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | user to query unread messages for. | ",(0,l.kt)("inlineCode",{parentName:"li"},"int|IChatEventMaker")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"type"))," | message event type message should not have. | ",(0,l.kt)("inlineCode",{parentName:"li"},"enum(read|deliver|delete)"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->doesntHaveChatEvents($user, 'read')->get();\n")),(0,l.kt)("h3",{id:"author"},(0,l.kt)("inlineCode",{parentName:"h3"},"author()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Conversation belongs to a user.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->author;\n")),(0,l.kt)("h2",{id:"collection-methods"},"Collection methods"),(0,l.kt)("p",null,"These are methods that could be called on collection of messages."),(0,l.kt)("h3",{id:"makedeliver-1"},(0,l.kt)("inlineCode",{parentName:"h3"},"makeDeliver()")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Method to mark conversations as delivered,")),(0,l.kt)("h4",{id:"params-15"},"@Params"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"strong"},"user"))," | user to assign chat events to. | ",(0,l.kt)("inlineCode",{parentName:"li"},"IChatEventMaker"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$messages = $user->messages()->get();\n\n$messages->makeDeliver(user: $user);\n")))}u.isMDXComponent=!0}}]);