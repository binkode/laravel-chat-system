"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5981],{5680:(e,a,n)=>{n.d(a,{xA:()=>p,yg:()=>u});var t=n(6540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),g=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=g(e.components);return t.createElement(s.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},y=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=g(n),y=r,u=d["".concat(s,".").concat(y)]||d[y]||m[y]||l;return n?t.createElement(u,i(i({ref:a},p),{},{components:n})):t.createElement(u,i({ref:a},p))}));function u(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=y;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var g=2;g<l;g++)i[g]=n[g];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}y.displayName="MDXCreateElement"},1271:(e,a,n)=>{n.r(a),n.d(a,{contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var t=n(8168),r=(n(6540),n(5680));const l={id:"conversation",title:"Conversation APIs",sidebar_label:"Conversation",slug:"/apis/models/conversation"},i=void 0,o={unversionedId:"apis/models/conversation",id:"version-v1.0.0-beta.4/apis/models/conversation",isDocsHomePage:!1,title:"Conversation APIs",description:"Namespace",source:"@site/versioned_docs/version-v1.0.0-beta.4/apis/models/conversation.md",sourceDirName:"apis/models",slug:"/apis/models/conversation",permalink:"/laravel-chat-system/docs/apis/models/conversation",editUrl:"https://github.com/binkode/laravel-chat-system-docs/edit/master/versioned_docs/version-v1.0.0-beta.4/apis/models/conversation.md",version:"v1.0.0-beta.4",frontMatter:{id:"conversation",title:"Conversation APIs",sidebar_label:"Conversation",slug:"/apis/models/conversation"},sidebar:"version-v1.0.0-beta.4/docs",previous:{title:"Message",permalink:"/laravel-chat-system/docs/apis/models/message"},next:{title:"ChatEvent",permalink:"/laravel-chat-system/docs/apis/models/chatEvent"}},s=[{value:"<strong>Namespace</strong>",id:"namespace",children:[]},{value:"<strong>Columns</strong>",id:"columns",children:[]},{value:"Query Builders",id:"query-builders",children:[{value:"<code>whereHasLastMessage()</code>",id:"wherehaslastmessage",children:[]},{value:"<code>whereNotParticipant()</code>",id:"wherenotparticipant",children:[]}]},{value:"Util Methods",id:"util-methods",children:[{value:"<code>createMessateWithToken()</code>",id:"createmessatewithtoken",children:[]},{value:"<code>addParticipant()</code>",id:"addparticipant",children:[]},{value:"<code>removeParticipant()</code>",id:"removeparticipant",children:[]},{value:"<code>createActivityMessage()</code>",id:"createactivitymessage",children:[]},{value:"<code>makeDelete()</code>",id:"makedelete",children:[]},{value:"<code>makeRead()</code>",id:"makeread",children:[]},{value:"<code>makeDeliver()</code>",id:"makedeliver",children:[]},{value:"<code>makeChatEvent()</code>",id:"makechatevent",children:[]}]},{value:"Relationships",id:"relationships",children:[{value:"<code>last_message()</code>",id:"last_message",children:[]},{value:"<code>participants()</code>",id:"participants",children:[]},{value:"<code>participant()</code>",id:"participant",children:[]},{value:"<code>otherParticipant()</code>",id:"otherparticipant",children:[]},{value:"<code>otherParticipants()</code>",id:"otherparticipants",children:[]},{value:"<code>messages()</code>",id:"messages",children:[]},{value:"<code>unread()</code>",id:"unread",children:[]},{value:"<code>undelivered()</code>",id:"undelivered",children:[]},{value:"<code>doesntHaveChatEvents()</code>",id:"doesnthavechatevents",children:[]},{value:"<code>author()</code>",id:"author",children:[]}]},{value:"Collection methods",id:"collection-methods",children:[{value:"<code>makeDeliver()</code>",id:"makedeliver-1",children:[]}]}],g={toc:s},p="wrapper";function d(e){let{components:a,...n}=e;return(0,r.yg)(p,(0,t.A)({},g,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"namespace"},(0,r.yg)("strong",{parentName:"h2"},"Namespace")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Binkode\\ChatSystem\\Models\\Conversation")),(0,r.yg)("h2",{id:"columns"},(0,r.yg)("strong",{parentName:"h2"},"Columns")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"name"),(0,r.yg)("th",{parentName:"tr",align:null},"type"),(0,r.yg)("th",{parentName:"tr",align:null},"description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"user_id")),(0,r.yg)("td",{parentName:"tr",align:null},"int"),(0,r.yg)("td",{parentName:"tr",align:null},"user id")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"name")),(0,r.yg)("td",{parentName:"tr",align:null},"string","|","null"),(0,r.yg)("td",{parentName:"tr",align:null},"conversation name")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"type")),(0,r.yg)("td",{parentName:"tr",align:null},"enum(private, group, issue)"),(0,r.yg)("td",{parentName:"tr",align:null},"type of the conversation")))),(0,r.yg)("h2",{id:"query-builders"},"Query Builders"),(0,r.yg)("p",null,"Methods that build queries."),(0,r.yg)("h3",{id:"wherehaslastmessage"},(0,r.yg)("inlineCode",{parentName:"h3"},"whereHasLastMessage()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"adds query where conversation has latest message where message is not a system message.")),(0,r.yg)("h4",{id:"params"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?user"))," | pass user arg for query to exclude messages deleted by the user. | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|IChatEventMaker|null"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Conversation::whereHasLastMessage($user)->get();\n")),(0,r.yg)("h3",{id:"wherenotparticipant"},(0,r.yg)("inlineCode",{parentName:"h3"},"whereNotParticipant()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Adds query where conversation doesn't have the given user as a participant.")),(0,r.yg)("h4",{id:"params-1"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?user"))," | pass user arg to query conversation where doesn't have participant equals the user. | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|IChatEventMaker"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Conversation::whereNotParticipant($user)->first();\n")),(0,r.yg)("h2",{id:"util-methods"},"Util Methods"),(0,r.yg)("h3",{id:"createmessatewithtoken"},(0,r.yg)("inlineCode",{parentName:"h3"},"createMessateWithToken()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Creates a message with token.")),(0,r.yg)("h4",{id:"return"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("inlineCode",{parentName:"li"},"Binkode\\ChatSystem\\Models\\Message"))),(0,r.yg)("h4",{id:"params-2"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"token"))," | unique token | ",(0,r.yg)("inlineCode",{parentName:"li"},"string|int")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"message"))," | message props | ",(0,r.yg)("inlineCode",{parentName:"li"},"array"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$message = $conversation->createMessageWithToken(\n  $token,\n  ['message' => 'hello', 'user_id' => $user->id]\n);\n")),(0,r.yg)("h3",{id:"addparticipant"},(0,r.yg)("inlineCode",{parentName:"h3"},"addParticipant()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Adds a user as participant of the conversaton.")),(0,r.yg)("h4",{id:"return-1"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("inlineCode",{parentName:"li"},"Binkode\\ChatSystem\\Models\\ConversationUser"))),(0,r.yg)("h4",{id:"params-3"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | participant to add | ",(0,r.yg)("inlineCode",{parentName:"li"},"Binkode\\ChatSystem\\Contracts\\IChatEventMaker")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"message"))," | message text for the activity message that may be created | ",(0,r.yg)("inlineCode",{parentName:"li"},"string"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$participant = $conversation->addParticipant($user, message: 'Someone joined the conversation');\n")),(0,r.yg)("h3",{id:"removeparticipant"},(0,r.yg)("inlineCode",{parentName:"h3"},"removeParticipant()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Removes a user as participant of the conversaton.")),(0,r.yg)("h4",{id:"return-2"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("inlineCode",{parentName:"li"},"null|bool"))),(0,r.yg)("h4",{id:"params-4"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | participant to remove | ",(0,r.yg)("inlineCode",{parentName:"li"},"Binkode\\ChatSystem\\Contracts\\IChatEventMaker")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"message"))," | message text for the activity message that may be created | ",(0,r.yg)("inlineCode",{parentName:"li"},"string"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$participant = $conversation->addParticipant($user, message: 'Someone joined the conversation');\n")),(0,r.yg)("h3",{id:"createactivitymessage"},(0,r.yg)("inlineCode",{parentName:"h3"},"createActivityMessage()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Creates an activity message.")),(0,r.yg)("h4",{id:"return-3"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("inlineCode",{parentName:"li"},"Binkode\\ChatSystem\\Models\\Message"))),(0,r.yg)("h4",{id:"params-5"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"message"))," | message props | ",(0,r.yg)("inlineCode",{parentName:"li"},"array"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$message = $conversation->createActivityMessage(message: [\n  'user_id' => $user->id,\n  'message' => 'Hello'\n]);\n")),(0,r.yg)("h3",{id:"makedelete"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeDelete()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"create a chatEvent of type ",(0,r.yg)("inlineCode",{parentName:"p"},"delete")," for the ",(0,r.yg)("inlineCode",{parentName:"p"},"conversation")," through the given ",(0,r.yg)("inlineCode",{parentName:"p"},"user"))),(0,r.yg)("h4",{id:"return-4"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"chatEvent"},"ChatEvent Model"))),(0,r.yg)("h4",{id:"emits"},"@Emits"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"../events/message/events"},"Message Events"))),(0,r.yg)("h4",{id:"params-6"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | user to assign the event to | ",(0,r.yg)("inlineCode",{parentName:"li"},"user")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?row"))," | specify whether to always create a new chat_events db row ortherwise update or create chat_events db row. | ",(0,r.yg)("inlineCode",{parentName:"li"},"bool")," default to ",(0,r.yg)("inlineCode",{parentName:"li"},"false")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?all"))," | specify whether to apply event for all. this should set the chat event column to ",(0,r.yg)("inlineCode",{parentName:"li"},"true|false")," | ",(0,r.yg)("inlineCode",{parentName:"li"},"bool"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->makeDelete(user: $user, row: false, all: false);\n")),(0,r.yg)("h3",{id:"makeread"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeRead()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"create a chatEvent of type ",(0,r.yg)("inlineCode",{parentName:"p"},"read")," for the ",(0,r.yg)("inlineCode",{parentName:"p"},"conversation")," through the given ",(0,r.yg)("inlineCode",{parentName:"p"},"user"))),(0,r.yg)("h4",{id:"return-5"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"chatEvent"},"ChatEvent Model"))),(0,r.yg)("h4",{id:"emits-1"},"@Emits"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"../events/message/events"},"Message Events"))),(0,r.yg)("h4",{id:"params-7"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | user to assign the event to | ",(0,r.yg)("inlineCode",{parentName:"li"},"user")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?row"))," | specify whether to always create a new chat_events db row ortherwise update or create chat_events db row. | ",(0,r.yg)("inlineCode",{parentName:"li"},"bool")," default to ",(0,r.yg)("inlineCode",{parentName:"li"},"true")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?all"))," | specify whether to apply event for all. this should set the chat event column to ",(0,r.yg)("inlineCode",{parentName:"li"},"true|false")," | ",(0,r.yg)("inlineCode",{parentName:"li"},"bool"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->makeRead(user: $user, row: true, all: false);\n")),(0,r.yg)("h3",{id:"makedeliver"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeDeliver()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"create a chatEvent of type ",(0,r.yg)("inlineCode",{parentName:"p"},"deliver")," for the ",(0,r.yg)("inlineCode",{parentName:"p"},"conversation")," through the given ",(0,r.yg)("inlineCode",{parentName:"p"},"user"))),(0,r.yg)("h4",{id:"return-6"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"chatEvent"},"ChatEvent Model"))),(0,r.yg)("h4",{id:"emits-2"},"@Emits"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"../events/message/events"},"Message Events"))),(0,r.yg)("h4",{id:"params-8"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | user to assign the event to | ",(0,r.yg)("inlineCode",{parentName:"li"},"user")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?row"))," | specify whether to always create a new chat_events db row ortherwise update or create chat_events db row. | ",(0,r.yg)("inlineCode",{parentName:"li"},"bool")," default to ",(0,r.yg)("inlineCode",{parentName:"li"},"true")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?all"))," | specify whether to apply event for all. this should set the chat event column to ",(0,r.yg)("inlineCode",{parentName:"li"},"true|false")," | ",(0,r.yg)("inlineCode",{parentName:"li"},"bool"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->makeDeliver(user: $user, row: true, all: false);\n")),(0,r.yg)("h3",{id:"makechatevent"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeChatEvent()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Method to make events for conversation.")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | user to assign the event to | ",(0,r.yg)("inlineCode",{parentName:"li"},"user")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?row"))," | specify whether to always create a new chat_events db row ortherwise update or create chat_events db row. | ",(0,r.yg)("inlineCode",{parentName:"li"},"bool")," default to ",(0,r.yg)("inlineCode",{parentName:"li"},"false")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?all"))," | specify whether to apply event for all. this should set the chat event column to ",(0,r.yg)("inlineCode",{parentName:"li"},"true|false")," | ",(0,r.yg)("inlineCode",{parentName:"li"},"bool"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->makeChatEvent(user: $user, type: 'delete', row: false, all: false);\n")),(0,r.yg)("h2",{id:"relationships"},"Relationships"),(0,r.yg)("p",null,"These are methods that defines the relationship between models."),(0,r.yg)("h3",{id:"last_message"},(0,r.yg)("inlineCode",{parentName:"h3"},"last_message()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Conversation has one latest message.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->last_message()->first();\n")),(0,r.yg)("h3",{id:"participants"},(0,r.yg)("inlineCode",{parentName:"h3"},"participants()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Conversation has many conversation user.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->participants()->get();\n")),(0,r.yg)("h3",{id:"participant"},(0,r.yg)("inlineCode",{parentName:"h3"},"participant()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Conversation has one latest conversation user.")),(0,r.yg)("h4",{id:"params-9"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | where participant = user | ",(0,r.yg)("inlineCode",{parentName:"li"},"User"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->participant($user)->first();\n")),(0,r.yg)("h3",{id:"otherparticipant"},(0,r.yg)("inlineCode",{parentName:"h3"},"otherParticipant()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Conversation has one other latest conversation user.")),(0,r.yg)("h4",{id:"params-10"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | where participant != user | ",(0,r.yg)("inlineCode",{parentName:"li"},"User"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->otherParticipant($user)->first();\n")),(0,r.yg)("h3",{id:"otherparticipants"},(0,r.yg)("inlineCode",{parentName:"h3"},"otherParticipants()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Conversation has many other latest conversation user.")),(0,r.yg)("h4",{id:"params-11"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | where participants doesn't include user | ",(0,r.yg)("inlineCode",{parentName:"li"},"User"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->otherParticipants($user)->get();\n")),(0,r.yg)("h3",{id:"messages"},(0,r.yg)("inlineCode",{parentName:"h3"},"messages()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Conversation has many messages.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->messages()->get();\n")),(0,r.yg)("h3",{id:"unread"},(0,r.yg)("inlineCode",{parentName:"h3"},"unread()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Conversation has many unread messages where given user is not the message sender.")),(0,r.yg)("h4",{id:"params-12"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | user to query unread messages for. | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|IChatEventMaker"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->unread($user)->get();\n")),(0,r.yg)("h3",{id:"undelivered"},(0,r.yg)("inlineCode",{parentName:"h3"},"undelivered()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Conversation has many undelivered messages where given user is not the message sender.")),(0,r.yg)("h4",{id:"params-13"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | user to query unread messages for. | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|IChatEventMaker"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->undelivered($user)->get();\n")),(0,r.yg)("h3",{id:"doesnthavechatevents"},(0,r.yg)("inlineCode",{parentName:"h3"},"doesntHaveChatEvents()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Conversation has many messages where given user is not the event emitter.")),(0,r.yg)("h4",{id:"params-14"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | user to query unread messages for. | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|IChatEventMaker")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"type"))," | message event type message should not have. | ",(0,r.yg)("inlineCode",{parentName:"li"},"enum(read|deliver|delete)"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->doesntHaveChatEvents($user, 'read')->get();\n")),(0,r.yg)("h3",{id:"author"},(0,r.yg)("inlineCode",{parentName:"h3"},"author()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Conversation belongs to a user.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$conversation->author;\n")),(0,r.yg)("h2",{id:"collection-methods"},"Collection methods"),(0,r.yg)("p",null,"These are methods that could be called on collection of messages."),(0,r.yg)("h3",{id:"makedeliver-1"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeDeliver()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Method to mark conversations as delivered,")),(0,r.yg)("h4",{id:"params-15"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | user to assign chat events to. | ",(0,r.yg)("inlineCode",{parentName:"li"},"IChatEventMaker"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$messages = $user->messages()->get();\n\n$messages->makeDeliver(user: $user);\n")))}d.isMDXComponent=!0}}]);