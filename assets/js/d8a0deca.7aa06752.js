"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[337],{5680:(e,a,n)=>{n.d(a,{xA:()=>d,yg:()=>u});var t=n(6540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=t.createContext({}),g=function(e){var a=t.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},d=function(e){var a=g(e.components);return t.createElement(o.Provider,{value:a},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},y=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=g(n),y=r,u=p["".concat(o,".").concat(y)]||p[y]||m[y]||l;return n?t.createElement(u,s(s({ref:a},d),{},{components:n})):t.createElement(u,s({ref:a},d))}));function u(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,s=new Array(l);s[0]=y;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var g=2;g<l;g++)s[g]=n[g];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}y.displayName="MDXCreateElement"},3705:(e,a,n)=>{n.r(a),n.d(a,{contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var t=n(8168),r=(n(6540),n(5680));const l={id:"message",title:"Message APIs",sidebar_label:"Message",slug:"/apis/models/message"},s=void 0,i={unversionedId:"apis/models/message",id:"version-v1.0.0-beta.4/apis/models/message",isDocsHomePage:!1,title:"Message APIs",description:"Namespace",source:"@site/versioned_docs/version-v1.0.0-beta.4/apis/models/message.md",sourceDirName:"apis/models",slug:"/apis/models/message",permalink:"/laravel-chat-system/docs/apis/models/message",editUrl:"https://github.com/binkode/laravel-chat-system-docs/edit/master/versioned_docs/version-v1.0.0-beta.4/apis/models/message.md",version:"v1.0.0-beta.4",frontMatter:{id:"message",title:"Message APIs",sidebar_label:"Message",slug:"/apis/models/message"},sidebar:"version-v1.0.0-beta.4/docs",previous:{title:"Listening to broadcast events",permalink:"/laravel-chat-system/docs/guides/broadcasts"},next:{title:"Conversation",permalink:"/laravel-chat-system/docs/apis/models/conversation"}},o=[{value:"<strong>Namespace</strong>",id:"namespace",children:[]},{value:"<strong>Columns</strong>",id:"columns",children:[]},{value:"Query Builders",id:"query-builders",children:[{value:"<code>whereNotSender()</code>",id:"wherenotsender",children:[]},{value:"<code>whereReply()</code>",id:"wherereply",children:[]},{value:"<code>whereDoesntHaveChatEvents()</code>",id:"wheredoesnthavechatevents",children:[]},{value:"<code>whereNotReadBy()</code>",id:"wherenotreadby",children:[]},{value:"<code>whereNotDeliveredTo()</code>",id:"wherenotdeliveredto",children:[]},{value:"<code>whereNotDeletedBy()</code>",id:"wherenotdeletedby",children:[]},{value:"<code>whereRelatedTo()</code>",id:"whererelatedto",children:[]},{value:"<code>hasEvent()</code>",id:"hasevent",children:[]},{value:"<code>HasNoEvent()</code>",id:"hasnoevent",children:[]},{value:"<code>whereConversationWasntDeleted()</code>",id:"whereconversationwasntdeleted",children:[]},{value:"<code>whereConversationWasntDeleted()</code>",id:"whereconversationwasntdeleted-1",children:[]}]},{value:"Util Methods",id:"util-methods",children:[{value:"<code>participantsHasDeleted()</code>",id:"participantshasdeleted",children:[]},{value:"<code>makeDelete()</code>",id:"makedelete",children:[]},{value:"<code>makeRead()</code>",id:"makeread",children:[]},{value:"<code>makeDeliver()</code>",id:"makedeliver",children:[]},{value:"<code>participants()</code>",id:"participants",children:[]}]},{value:"Relationships",id:"relationships",children:[{value:"<code>conversation()</code>",id:"conversation",children:[]},{value:"<code>chatEvents()</code>",id:"chatevents",children:[]},{value:"<code>sender()</code>",id:"sender",children:[]},{value:"<code>reply()</code>",id:"reply",children:[]}]},{value:"Collection methods",id:"collection-methods",children:[{value:"<code>makeRead()</code>",id:"makeread-1",children:[]},{value:"<code>makeDelete()</code>",id:"makedelete-1",children:[]},{value:"<code>makeDeliver()</code>",id:"makedeliver-1",children:[]},{value:"<code>makeChatEvent()</code>",id:"makechatevent",children:[]}]}],g={toc:o},d="wrapper";function p(e){let{components:a,...n}=e;return(0,r.yg)(d,(0,t.A)({},g,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"namespace"},(0,r.yg)("strong",{parentName:"h2"},"Namespace")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Binkode\\ChatSystem\\Models\\Message")),(0,r.yg)("h2",{id:"columns"},(0,r.yg)("strong",{parentName:"h2"},"Columns")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"name"),(0,r.yg)("th",{parentName:"tr",align:null},"type"),(0,r.yg)("th",{parentName:"tr",align:null},"description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"conversation_id")),(0,r.yg)("td",{parentName:"tr",align:null},"int"),(0,r.yg)("td",{parentName:"tr",align:null},"conversation id message belongs to")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"user_id")),(0,r.yg)("td",{parentName:"tr",align:null},"int"),(0,r.yg)("td",{parentName:"tr",align:null},"user id message belongs to")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"reply_id")),(0,r.yg)("td",{parentName:"tr",align:null},"int"),(0,r.yg)("td",{parentName:"tr",align:null},"reply id message belongs to")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"reply_type")),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"reply class message belongs to")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"message")),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"message text")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"type")),(0,r.yg)("td",{parentName:"tr",align:null},"enum(user, system, activity)"),(0,r.yg)("td",{parentName:"tr",align:null},"message text")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"metas")),(0,r.yg)("td",{parentName:"tr",align:null},"json"),(0,r.yg)("td",{parentName:"tr",align:null},"message key values")))),(0,r.yg)("h2",{id:"query-builders"},"Query Builders"),(0,r.yg)("p",null,"Message Model Query Builder APIs"),(0,r.yg)("h3",{id:"wherenotsender"},(0,r.yg)("inlineCode",{parentName:"h3"},"whereNotSender()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"adds query to to exclude the given user")),(0,r.yg)("h4",{id:"params"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?user"))," | message sender to exclude. | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|IChatEventMaker|null"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Message::whereNotSender($user)->get();\n")),(0,r.yg)("h3",{id:"wherereply"},(0,r.yg)("inlineCode",{parentName:"h3"},"whereReply()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"adds query condition on the given reply_id and or reply_type")),(0,r.yg)("h4",{id:"params-1"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"reply"))," | message sender to exclude. | ",(0,r.yg)("inlineCode",{parentName:"li"},"array[reply_id => int, reply_type => string]"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Message::whereReply([\n  'reply_id' => 1,\n  'reply_type' => Message::class\n])->get();\n")),(0,r.yg)("h3",{id:"wheredoesnthavechatevents"},(0,r.yg)("inlineCode",{parentName:"h3"},"whereDoesntHaveChatEvents()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"adds query where message doesn't have chatEvents")),(0,r.yg)("h4",{id:"params-2"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?type"))," | adds condition where = message chatEvents.type. | ",(0,r.yg)("inlineCode",{parentName:"li"},"string(read|delete|deliver)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?user"))," | adds condition where user = message chatEvents maker | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|IChatEventMaker|null")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?conversationScope"))," | callback to get the conversation query object. | ",(0,r.yg)("inlineCode",{parentName:"li"},"null|Closure"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Message::whereDoesntHaveChatEvents(\n  'read',\n  $user,\n  fn ($query) => $query->where('created_at', '<', NOW())\n)->get();\n")),(0,r.yg)("h3",{id:"wherenotreadby"},(0,r.yg)("inlineCode",{parentName:"h3"},"whereNotReadBy()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"adds query where message is not read by the given user")),(0,r.yg)("h4",{id:"params-3"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?user"))," | adds condition where user = message chatEvents maker | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|IChatEventMaker|null"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Message::whereNotReadBy(\n  $user,\n)->get();\n")),(0,r.yg)("h3",{id:"wherenotdeliveredto"},(0,r.yg)("inlineCode",{parentName:"h3"},"whereNotDeliveredTo()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"adds query where message is not delivered to the given user")),(0,r.yg)("h4",{id:"params-4"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?user"))," | adds condition where user = message chatEvents maker | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|IChatEventMaker|null"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Message::whereNotDeliveredTo(\n  $user,\n)->get();\n")),(0,r.yg)("h3",{id:"wherenotdeletedby"},(0,r.yg)("inlineCode",{parentName:"h3"},"whereNotDeletedBy()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"adds query where message is not deleted by the given user")),(0,r.yg)("h4",{id:"params-5"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?user"))," | adds condition where user = message chatEvents maker | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|IChatEventMaker|null"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Message::whereNotDeletedBy(\n  $user,\n)->get();\n")),(0,r.yg)("h3",{id:"whererelatedto"},(0,r.yg)("inlineCode",{parentName:"h3"},"whereRelatedTo()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"adds query where message has participant = user")),(0,r.yg)("h4",{id:"params-6"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | adds condition where user = participant | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|IChatEventMaker|null"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Message::whereRelatedTo(\n  $user,\n)->get();\n")),(0,r.yg)("h3",{id:"hasevent"},(0,r.yg)("inlineCode",{parentName:"h3"},"hasEvent()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"adds query where message has chatEvents")),(0,r.yg)("h4",{id:"params-7"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"eventScope?"))," | callback to get the chatEvents query object. | ",(0,r.yg)("inlineCode",{parentName:"li"},"callable"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Message::hasEvents(\n  fn ($q) => $q->whereType('read'),\n)->get();\n")),(0,r.yg)("h3",{id:"hasnoevent"},(0,r.yg)("inlineCode",{parentName:"h3"},"HasNoEvent()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"adds query where message has no chatEvents")),(0,r.yg)("h4",{id:"params-8"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"eventScope?"))," | callback to get the chatEvents query object. | ",(0,r.yg)("inlineCode",{parentName:"li"},"callable"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Message::HasNoEvent(\n  fn ($q) => $q->whereType('deliver'),\n)->get();\n")),(0,r.yg)("h3",{id:"whereconversationwasntdeleted"},(0,r.yg)("inlineCode",{parentName:"h3"},"whereConversationWasntDeleted()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"query where message's conversation has not been deleted")),(0,r.yg)("h4",{id:"params-9"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"by?"))," | adds condition where conversation was not deleted by the given user. | ",(0,r.yg)("inlineCode",{parentName:"li"},"user"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Message::whereConversationWasntDeleted(\n  $user,\n)->get();\n")),(0,r.yg)("h3",{id:"whereconversationwasntdeleted-1"},(0,r.yg)("inlineCode",{parentName:"h3"},"whereConversationWasntDeleted()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"query where message's conversation has not been deleted")),(0,r.yg)("h4",{id:"params-10"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"by?"))," | adds condition where conversation was not deleted by the given user. | ",(0,r.yg)("inlineCode",{parentName:"li"},"user"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"Message::whereConversationWasntDeleted(\n  $user,\n)->get();\n")),(0,r.yg)("h2",{id:"util-methods"},"Util Methods"),(0,r.yg)("h3",{id:"participantshasdeleted"},(0,r.yg)("inlineCode",{parentName:"h3"},"participantsHasDeleted()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"check if message has been deleted by all participants of the conversation message belongs to.")),(0,r.yg)("h4",{id:"return"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("inlineCode",{parentName:"li"},"bool"))),(0,r.yg)("h4",{id:"params-11"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?maker_id"))," | chatEvent maker_id to exclude | ",(0,r.yg)("inlineCode",{parentName:"li"},"int"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$message = $user->messages()->first();\n$message->participantsHasDeleted($user->id); // true|false\n")),(0,r.yg)("h3",{id:"makedelete"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeDelete()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"create a chatEvent of type ",(0,r.yg)("inlineCode",{parentName:"p"},"delete")," for the ",(0,r.yg)("inlineCode",{parentName:"p"},"message")," through the given ",(0,r.yg)("inlineCode",{parentName:"p"},"user"))),(0,r.yg)("h4",{id:"return-1"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"chatEvent"},"ChatEvent Model"))),(0,r.yg)("h4",{id:"emits"},"@Emits"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"../events/message/events"},"Message Events"))),(0,r.yg)("h4",{id:"params-12"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | user to assign the event to | ",(0,r.yg)("inlineCode",{parentName:"li"},"user")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?all"))," | specify whether to apply event for all. this should set the chat event column to ",(0,r.yg)("inlineCode",{parentName:"li"},"true|false")," | ",(0,r.yg)("inlineCode",{parentName:"li"},"bool"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$message = $user->messages()->first();\n$message->makeDelete($user);\n")),(0,r.yg)("h3",{id:"makeread"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeRead()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"create a chatEvent of type ",(0,r.yg)("inlineCode",{parentName:"p"},"read")," for the ",(0,r.yg)("inlineCode",{parentName:"p"},"message")," through the given ",(0,r.yg)("inlineCode",{parentName:"p"},"user"))),(0,r.yg)("h4",{id:"return-2"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"chatEvent"},"ChatEvent Model"))),(0,r.yg)("h4",{id:"emits-1"},"@Emits"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"../events/message/events"},"Message Events"))),(0,r.yg)("h4",{id:"params-13"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | user to assign the event to | ",(0,r.yg)("inlineCode",{parentName:"li"},"user"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$message = $user->messages()->first();\n$message->makeRead($user);\n")),(0,r.yg)("h3",{id:"makedeliver"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeDeliver()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"create a chatEvent of type ",(0,r.yg)("inlineCode",{parentName:"p"},"deliver")," for the ",(0,r.yg)("inlineCode",{parentName:"p"},"message")," through the given ",(0,r.yg)("inlineCode",{parentName:"p"},"user"))),(0,r.yg)("h4",{id:"return-3"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"chatEvent"},"ChatEvent Model"))),(0,r.yg)("h4",{id:"emits-2"},"@Emits"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("a",{parentName:"li",href:"../events/message/events"},"Message Events"))),(0,r.yg)("h4",{id:"params-14"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"user"))," | user to assign the event to | ",(0,r.yg)("inlineCode",{parentName:"li"},"user"))),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$message = $user->messages()->first();\n$message->makeDeliver($user);\n")),(0,r.yg)("h3",{id:"participants"},(0,r.yg)("inlineCode",{parentName:"h3"},"participants()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Query participants of the conversation the message belongs to.")),(0,r.yg)("h4",{id:"return-4"},"@Return"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"type ",(0,r.yg)("inlineCode",{parentName:"li"},"ConversationUser Query Builder"))),(0,r.yg)("h4",{id:"params-15"},"@Params"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"strong"},"?user"))," | adds condition where participant = user | ",(0,r.yg)("inlineCode",{parentName:"li"},"int|user"))),(0,r.yg)("p",null,"find user from the message's participants"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$message = $user->messages()->first();\n$message->participants($otherUser)->find(); // ConversationUser|null\n")),(0,r.yg)("h2",{id:"relationships"},"Relationships"),(0,r.yg)("p",null,"These are methods that defines the relationship between models."),(0,r.yg)("h3",{id:"conversation"},(0,r.yg)("inlineCode",{parentName:"h3"},"conversation()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Conversation message belongs to.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$message = $user->messages()->first();\n$message->conversation->id;\n")),(0,r.yg)("h3",{id:"chatevents"},(0,r.yg)("inlineCode",{parentName:"h3"},"chatEvents()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Message has many chat events")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$message = $user->messages()->first();\n$message->chatEvents;\n")),(0,r.yg)("h3",{id:"sender"},(0,r.yg)("inlineCode",{parentName:"h3"},"sender()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Message belongs to user")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$message = $user->messages()->first();\n$message->user;\n")),(0,r.yg)("h3",{id:"reply"},(0,r.yg)("inlineCode",{parentName:"h3"},"reply()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Message belongs to message as reply")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$message = $user->messages()->first();\n$message->reply;\n")),(0,r.yg)("h2",{id:"collection-methods"},"Collection methods"),(0,r.yg)("p",null,"These are methods that could be called on collection of messages."),(0,r.yg)("h3",{id:"makeread-1"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeRead()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Method to mark messages as read,\npass a user arg to specify the user reading the messages. ")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$messages = $user->messages()->get();\n\n$messages->makeRead($user);\n")),(0,r.yg)("h3",{id:"makedelete-1"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeDelete()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Method to mark messages as deleted,\npass a user arg to specify the user deleting the messages.\npass a all arg to delete the messages for a participants of the message conversation. ")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$messages = $user->messages()->get();\n\n$messages->makeDelete(user: $user, all: false);\n")),(0,r.yg)("h3",{id:"makedeliver-1"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeDeliver()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Method to mark messages as delivered,\npass a user arg to specify the user which messages are being delivered to. ")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$messages = $user->messages()->get();\n\n$messages->makeDeliver(user: $user, all: false);\n")),(0,r.yg)("h3",{id:"makechatevent"},(0,r.yg)("inlineCode",{parentName:"h3"},"makeChatEvent()")),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Method to make events for messages,\npass a user arg to specify the user making the event.\npass a type arg to specify the type of the event.\npass a all arg to specify the event is for all participant of the conversation message belongs to. ")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-php"},"$messages = $user->messages()->get();\n\n$messages->makeChatEvent(user: $user, type: 'delete', all: false);\n")))}p.isMDXComponent=!0}}]);