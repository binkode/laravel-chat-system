(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[803],{9251:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return i},toc:function(){return d},default:function(){return p}});var s=a(2122),n=a(9756),r=(a(7294),a(3905)),l={id:"message",title:"Message APIs",sidebar_label:"Message",slug:"/apis/models/message"},i={unversionedId:"apis/models/message",id:"apis/models/message",isDocsHomePage:!1,title:"Message APIs",description:"Namespace",source:"@site/docs/apis/models/message.md",sourceDirName:"apis/models",slug:"/apis/models/message",permalink:"/laravel-chat-system/docs/apis/models/message",editUrl:"https://github.com/myckhel/laravel-chat-system-docs/edit/master/docs/apis/models/message.md",version:"current",sidebar_label:"Message",frontMatter:{id:"message",title:"Message APIs",sidebar_label:"Message",slug:"/apis/models/message"},sidebar:"docs",previous:{title:"Installation",permalink:"/laravel-chat-system/docs/install"}},d=[{value:"<strong>Namespace</strong>",id:"namespace",children:[]},{value:"<code>Query Builders</code>",id:"query-builders",children:[{value:"<code>whereNotSender()</code>",id:"wherenotsender",children:[]},{value:"<code>whereReply()</code>",id:"wherereply",children:[]},{value:"<code>notMsgEvents()</code>",id:"notmsgevents",children:[]}]}],o={toc:d};function p(e){var t=e.components,a=(0,n.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,s.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"namespace"},(0,r.kt)("strong",{parentName:"h2"},"Namespace")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Myckhel\\ChatSystem\\Models\\Message")),(0,r.kt)("h2",{id:"query-builders"},(0,r.kt)("inlineCode",{parentName:"h2"},"Query Builders")),(0,r.kt)("p",null,"Message Model Query Builder APIs"),(0,r.kt)("h3",{id:"wherenotsender"},(0,r.kt)("inlineCode",{parentName:"h3"},"whereNotSender()")),(0,r.kt)("p",null,"adds query to to exclude the given user"),(0,r.kt)("h4",{id:"params"},"Params"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"user?"))," message sender to exclude. ",(0,r.kt)("inlineCode",{parentName:"li"},"int|ChatEventMaker|null"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"Message::whereNotSender($user)->get();\n")),(0,r.kt)("h3",{id:"wherereply"},(0,r.kt)("inlineCode",{parentName:"h3"},"whereReply()")),(0,r.kt)("p",null,"adds query condition on the given reply_id and or reply_type"),(0,r.kt)("h4",{id:"params-1"},"Params"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"reply"))," message sender to exclude. ",(0,r.kt)("inlineCode",{parentName:"li"},"array[reply_id => int, reply_type => string]"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"Message::whereReply([\n  'reply_id' => 1,\n  'reply_type' => Message::class\n])->get();\n")),(0,r.kt)("h3",{id:"notmsgevents"},(0,r.kt)("inlineCode",{parentName:"h3"},"notMsgEvents()")),(0,r.kt)("p",null,"adds query where message doesn't have chatEvents"),(0,r.kt)("h4",{id:"params-2"},"Params"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"type?"))," adds condition where = message chatEvents.type. ",(0,r.kt)("inlineCode",{parentName:"li"},"string(read|delete|deliver)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"user?"))," adds condition where user = message chatEvents maker ",(0,r.kt)("inlineCode",{parentName:"li"},"int|ChatEventMaker|null")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"conversationScope?"))," callback to get the conversation query object. ",(0,r.kt)("inlineCode",{parentName:"li"},"null|Closure"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"Message::notMsgEvents(\n  'read',\n  $user,\n  fn ($query) => $query->where('created_at', '<', NOW())\n)->get();\n")))}p.isMDXComponent=!0}}]);