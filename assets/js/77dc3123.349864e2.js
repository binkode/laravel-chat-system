(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[288],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return v}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),v=a,g=d["".concat(c,".").concat(v)]||d[v]||p[v]||o;return n?r.createElement(g,i(i({ref:t},l),{},{components:n})):r.createElement(g,i({ref:t},l))}));function v(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7663:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return p}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i={id:"guides.conversation",title:"Using Conversation",sidebar_label:"Using Conversation",slug:"/guides/conversation"},s=void 0,c={unversionedId:"guides/guides.conversation",id:"guides/guides.conversation",isDocsHomePage:!1,title:"Using Conversation",description:"// TODO",source:"@site/docs/guides/conversation.md",sourceDirName:"guides",slug:"/guides/conversation",permalink:"/laravel-chat-system/docs/guides/conversation",editUrl:"https://github.com/myckhel/laravel-chat-system-docs/edit/master/docs/guides/conversation.md",version:"current",frontMatter:{id:"guides.conversation",title:"Using Conversation",sidebar_label:"Using Conversation",slug:"/guides/conversation"},sidebar:"docs",previous:{title:"Using Models",permalink:"/laravel-chat-system/docs/guides/models"},next:{title:"Using Message",permalink:"/laravel-chat-system/docs/guides/message"}},u=[{value:"Creating conversation",id:"creating-conversation",children:[{value:"Output",id:"output",children:[]}]},{value:"Creating conversation type",id:"creating-conversation-type",children:[{value:"Output",id:"output-1",children:[]}]},{value:"Adding user/participant to conversation",id:"adding-userparticipant-to-conversation",children:[]},{value:"Deleting conversation",id:"deleting-conversation",children:[]}],l={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"// TODO"),(0,o.kt)("h2",{id:"creating-conversation"},"Creating conversation"),(0,o.kt)("p",null,"When conversation is created, the system will automatically add the creator as a participant of the conversation using the ",(0,o.kt)("inlineCode",{parentName:"p"},"conversation.user_id")," if only the chatSystem Observer have been registered. see ",(0,o.kt)("a",{parentName:"p",href:"../guides/providers#registering-observers"},"registering-observers")," "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$conversation = $user->conversations()->create([\n  'user_id' => $user->id,\n]);\n")),(0,o.kt)("h3",{id:"output"},"Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'// conversation\n{\n  "id": 297,\n  "user_id": 13,\n  "type": "private",\n  "updated_at": "2021-07-14T18:59:44.000000Z",\n  "created_at": "2021-07-14T18:59:44.000000Z"\n}\n')),(0,o.kt)("h2",{id:"creating-conversation-type"},"Creating conversation type"),(0,o.kt)("p",null,"You may create a conversation of another type such as ",(0,o.kt)("inlineCode",{parentName:"p"},"group")," and should have a name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$conversation = $user->conversations()->create([\n  'user_id' => $user->id,\n  'type'    => 'group',\n  'name'    => 'Laravel Developer\\'s Group',\n]);\n")),(0,o.kt)("h3",{id:"output-1"},"Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'// conversation\n{\n  "id": 297,\n  "user_id": 13,\n  "type": "group",\n  "name": "Laravel Developer\\\'s Group",\n  "updated_at": "2021-07-14T18:59:44.000000Z",\n  "created_at": "2021-07-14T18:59:44.000000Z"\n}\n')),(0,o.kt)("h2",{id:"adding-userparticipant-to-conversation"},"Adding user/participant to conversation"),(0,o.kt)("p",null,"You may add as many participants to a conversation but its not a good idea for a conversation of type ",(0,o.kt)("inlineCode",{parentName:"p"},"private")," to have more than 2 participants."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$groupConversation->participants()->createMany(\n  ['user_id' => 1],\n  ['user_id' => 2],\n);\n")),(0,o.kt)("h2",{id:"deleting-conversation"},"Deleting conversation"),(0,o.kt)("p",null,"You may delete conversation with ",(0,o.kt)("a",{parentName:"p",href:"../apis/models/conversation#makeDelete"},"makeDelete")," method which requires 1 argument = user deleting the conversation.\nYou can specify delete for all option by passing named argument ",(0,o.kt)("inlineCode",{parentName:"p"},"all")," which will specify that the conversation has been deleted for all participants.\nThe method will also try to emit ",(0,o.kt)("a",{parentName:"p",href:"../apis/events/message/events"},"Message Events")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$conversation->makeDelete($user, all: true);\n")))}p.isMDXComponent=!0}}]);